<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Workstation.UaClient</name>
    </assembly>
    <members>
        <member name="T:Workstation.Collections.ErrorsContainer`1">
            <summary>
            Manages validation errors for an object, notifying when the error state changes.
            </summary>
            <typeparam name="T">The type of the error object.</typeparam>
        </member>
        <member name="M:Workstation.Collections.ErrorsContainer`1.#ctor(System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.Collections.ErrorsContainer`1"/> class.
            </summary>
            <param name="raiseErrorsChanged">The action that invoked if when errors are added for an object./>
            event.</param>
        </member>
        <member name="P:Workstation.Collections.ErrorsContainer`1.HasErrors">
            <summary>
            Gets a value indicating whether the object has validation errors.
            </summary>
        </member>
        <member name="M:Workstation.Collections.ErrorsContainer`1.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The validation errors of type <typeparamref name="T"/> for the property.</returns>
        </member>
        <member name="M:Workstation.Collections.ErrorsContainer`1.ClearErrors(System.String)">
            <summary>
            Clears the errors for a property.
            </summary>
            <param name="propertyName">The name of th property for which to clear errors.</param>
            <example>
                container.ClearErrors("SomeProperty");
            </example>
        </member>
        <member name="M:Workstation.Collections.ErrorsContainer`1.SetErrors(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the validation errors for the specified property.
            </summary>
            <remarks>
            If a change is detected then the errors changed event is raised.
            </remarks>
            <param name="propertyName">The name of the property.</param>
            <param name="newValidationResults">The new validation errors.</param>
        </member>
        <member name="T:Workstation.Collections.ObservableQueue`1">
            <summary>
            Represents a first-in, first-out collection that implements INotifyCollectionChanged.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.Collections.ObservableQueue`1"/> class.
            </summary>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.Collections.ObservableQueue`1"/> class.
            </summary>
            <param name="capacity">The number of elements that the queue can initially store.</param>
            <param name="isFixedSize">If true, older elements are discarded.</param>
        </member>
        <member name="E:Workstation.Collections.ObservableQueue`1.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.
            </summary>
        </member>
        <member name="E:Workstation.Collections.ObservableQueue`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.Clear">
            <summary>
            Removes all objects from the queue.
            </summary>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the queue.
            </summary>
            <returns>The object that is removed from the beginning of the queue.</returns>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the queue.
            </summary>
            <param name="item">The object to add to the queue.</param>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.AcknowledgeableCondition">
            <summary>
            Represents an acknowledgeable condition.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.AlarmCondition">
            <summary>
            Represents an alarm condition.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ArraySegmentExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.ArraySegment`1"/>.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.AsArraySegment``1(``0[],System.Int32,System.Int32)">
            <summary>
            Creates an array segment referencing this array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="offset">The offset in this array where the segment begins. Must be in the range <c>[0, <paramref name="array"/>.Length]</c>.</param>
            <param name="count">The length of the segment. Must be in the range <c>[0, <paramref name="array"/>.Length - <paramref name="offset"/>]</c>.</param>
            <returns>A new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.AsArraySegment``1(``0[],System.Int32)">
            <summary>
            Creates an array segment referencing this array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="offset">The offset in this array where the segment begins. Defaults to <c>0</c> (the beginning of the array). Must be in the range <c>[0, <paramref name="array"/>.Length]</c>.</param>
            <returns>A new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CreateStream(System.ArraySegment{System.Byte},System.Boolean)">
            <summary>
            Creates a <see cref="T:System.IO.MemoryStream"/> over this array segment. Multiple streams may be created for the same array and array segment, but if one of them writes then any buffering will cause inconsistent views.
            </summary>
            <param name="segment">The array segment.</param>
            <param name="writable">A value indicating whether the stream is writable. Defautls to <c>true</c>.</param>
            <returns>A new <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CreateBinaryReader(System.ArraySegment{System.Byte})">
            <summary>
            Creates a <see cref="T:System.IO.BinaryReader"/> over this array segment.
            </summary>
            <param name="segment">The array segment.</param>
            <returns>A new <see cref="T:System.IO.BinaryReader"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CreateBinaryWriter(System.ArraySegment{System.Byte})">
            <summary>
            Creates a <see cref="T:System.IO.BinaryWriter"/> over this array segment.
            </summary>
            <param name="segment">The array segment.</param>
            <returns>A new <see cref="T:System.IO.BinaryWriter"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.Take``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by taking a number of elements from the beginning of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.Skip``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements from the beginning of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.Slice``1(System.ArraySegment{``0},System.Int32,System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements and then taking a number of elements from this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="skipCount">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <param name="takeCount">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count - <paramref name="skipCount"/>]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.TakeLast``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by taking a number of elements from the end of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.SkipLast``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements from the end of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CopyTo``1(System.ArraySegment{``0},System.ArraySegment{``0})">
            <summary>
            Copies the elements in this array segment into a destination array segment. The copy operation will not overflow the bounds of the segments; it will copy <c>min(segment.Count, destination.Count)</c> elements.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The source array segment.</param>
            <param name="destination">The detsintation array segment.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CopyTo``1(System.ArraySegment{``0},``0[],System.Int32)">
            <summary>
            Copies the elements in this array segment into a destination array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="array">The destination array. May not be <c>null</c>.</param>
            <param name="arrayIndex">The index in the destination array at which to begin copying. Defaults to <c>0</c>. Must be greater than or equal to <c>0</c>.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.ToArray``1(System.ArraySegment{``0})">
            <summary>
            Creates a new array containing the elements in this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.AttributeServiceSet.ReadAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.ReadRequest,System.Threading.CancellationToken)">
            <summary>
            Reads a list of Node attributes.
            </summary>
            <param name="client">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.ReadRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.ReadResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.AttributeServiceSet.WriteAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.WriteRequest,System.Threading.CancellationToken)">
            <summary>
            Writes a list of Node attributes.
            </summary>
            <param name="client">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.WriteRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.WriteResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.AttributeServiceSet.HistoryReadAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.HistoryReadRequest,System.Threading.CancellationToken)">
            <summary>
            Reads historical values or Events of one or more Nodes.
            </summary>
            <param name="client">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.HistoryReadRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.HistoryReadResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.AttributeServiceSet.HistoryUpdateAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.HistoryUpdateRequest,System.Threading.CancellationToken)">
            <summary>
            Updates historical values or Events of one or more Nodes.
            </summary>
            <param name="client">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.HistoryUpdateRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.HistoryUpdateResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.BaseEvent">
            <summary>
            Represents an event.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.BinaryEncodingIdAttribute">
            <summary>
            Attribute for classes of type IEncodable to indicate the binary encoding id.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.CommunicationObject">
            <summary>
            Provides a common base implementation for the basic state machine common to all communication-oriented objects in the system.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.CommunicationObject"/> class.
            </summary>
            <param name="loggerFactory">The logger.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.CommunicationObject.State">
            <summary>
            Gets or sets gets a value that indicates the current state of the communication object.
            </summary>
            <returns>A value from the <see cref="T:Workstation.ServiceModel.Ua.CommunicationState" /> enumeration that indicates the current state of the object.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.AbortAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition immediately from its current state into the closing state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from its current state into the closed state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from the created state into the opened state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.FaultAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from its current state into the faulted state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.FaultAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from its current state into the faulted state.
            </summary>
            <param name="exception">The exception.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnAbortAsync(System.Threading.CancellationToken)">
            <summary>
            Inserts processing on a communication object after it transitions to the closing state due to the invocation of the AbortAsync operation.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            Inserts processing on a communication object after it transitions to the closing state due to the invocation of the CloseAsync operation.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnClosedAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked during the transition of a communication object into the closed state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnClosingAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked during the transition of a communication object into the closing state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnFaulted(System.Threading.CancellationToken)">
            <summary>
            Inserts processing on a communication object after it transitions to the faulted state due to the FaultAsync operation.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnOpenAsync(System.Threading.CancellationToken)">
            <summary>
            Inserts processing on a communication object after it transitions into the opening state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnOpenedAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked during the transition of a communication object into the opened state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnOpeningAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked during the transition of a communication object into the opening state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.ThrowIfDisposedOrImmutable">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the communication object is not in the created state.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.ThrowIfClosedOrNotOpening">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the communication object is not in the opening, open, or closing state.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.ServiceOperation.Request">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel">
            <summary>
            A secure channel for communicating with OPC UA servers using the UA TCP transport profile.
            </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.DefaultTimeoutHint">
            <summary>
            The default timeout for requests.
            </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.DefaultDiagnosticsHint">
            <summary>
            the default diagnostic flags for requests.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,Workstation.ServiceModel.Ua.EndpointDescription,Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaTcpSecureChannelOptions,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel"/> class.
            </summary>
            <param name="localDescription">The local description.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="remoteEndpoint">The remote endpoint</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="options">The secure channel options.</param>
            <param name="additionalTypes">Any additional types to be registered with encoder.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.LocalDescription">
            <summary>
            Gets the local description.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.CertificateStore">
            <summary>
            Gets the certificate store.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.TimeoutHint">
            <summary>
            Gets the default number of milliseconds that may elapse before an operation is cancelled by the service.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.DiagnosticsHint">
            <summary>
            Gets the default diagnostics flags to be requested by the service.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.AdditionalTypes">
            <summary>
            Gets any additional types to be registered with encoder.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.LocalCertificate">
            <summary>
            Gets the local certificate.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.RemoteCertificate">
            <summary>
            Gets the remote certificate.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.LocalPrivateKey">
            <summary>
            Gets the local private key.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.RemotePublicKey">
            <summary>
            Gets the remote public key.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.LocalNonce">
            <summary>
            Gets the local nonce.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.ChannelId">
            <summary>
            Gets or sets the channel id.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.TokenId">
            <summary>
            Gets or sets the token id.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.AuthenticationToken">
            <summary>
            Gets or sets the authentication token.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.NamespaceUris">
            <summary>
            Gets or sets the namespace uris.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.ServerUris">
            <summary>
            Gets or sets the server uris.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.TryGetTypeFromEncodingId(Workstation.ServiceModel.Ua.NodeId,System.Type@)">
            <summary>
            Gets the system type associated with the encodingId.
            </summary>
            <param name="encodingId">The encodingId.</param>
            <param name="type">The system type.</param>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.TryGetBinaryEncodingIdFromType(System.Type,Workstation.ServiceModel.Ua.NodeId@)">
            <summary>
            Gets the BinaryEncodingId associated with the system type.
            </summary>
            <param name="type">The system type.</param>
            <param name="binaryEncodingId">The BinaryEncodingId.</param>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.RequestAsync(Workstation.ServiceModel.Ua.IServiceRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a <see cref="T:Workstation.ServiceModel.Ua.IServiceRequest"/> to the server.
            </summary>
            <param name="request">The request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.OnOpeningAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.OnOpenAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.OnOpenedAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.OnCloseAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.OnAbortAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.CalculatePSHA(System.Byte[],System.Byte[],System.Int32,System.String)">
            <summary>
            Calculate the pseudo random function.
            </summary>
            <param name="secret">The secret.</param>
            <param name="seed">The seed.</param>
            <param name="sizeBytes">The size in bytes.</param>
            <param name="securityPolicyUri">The securityPolicyUri.</param>
            <returns>A array of bytes.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.SendRequestActionAsync(Workstation.ServiceModel.Ua.Channels.ServiceOperation)">
            <summary>
            Send service request on transport channel.
            </summary>
            <param name="operation">A service operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.SendRequestAsync(Workstation.ServiceModel.Ua.Channels.ServiceOperation,System.Threading.CancellationToken)">
            <summary>
            Send service request on transport channel.
            </summary>
            <param name="operation">A service operation.</param>
            <param name="token">A cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.SendOpenSecureChannelRequestAsync(Workstation.ServiceModel.Ua.OpenSecureChannelRequest,System.Threading.CancellationToken)">
            <summary>
            Send open secure channel service request on transport channel.
            </summary>
            <param name="request">A service request</param>
            <param name="token">A cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.SendCloseSecureChannelRequestAsync(Workstation.ServiceModel.Ua.CloseSecureChannelRequest,System.Threading.CancellationToken)">
            <summary>
            Send close secure channel request on transport channel.
            </summary>
            <param name="request">A service request</param>
            <param name="token">A cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.SendServiceRequestAsync(Workstation.ServiceModel.Ua.IServiceRequest,System.Threading.CancellationToken)">
            <summary>
            Send service request on transport channel.
            </summary>
            <param name="request">A service request</param>
            <param name="token">A cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.ReceiveResponsesAsync(System.Threading.CancellationToken)">
            <summary>
            Start a task to receive service responses from transport channel.
            </summary>
            <param name="token">A cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.ReceiveResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Receive next service response from transport channel.
            </summary>
            <param name="token">A cancellation token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.TimestampHeader(Workstation.ServiceModel.Ua.IServiceRequest)">
            <summary>
            Update request header with current time.
            </summary>
            <param name="request">The service request.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.GetNextHandle">
            <summary>
            Get next request handle.
            </summary>
            <returns>A request handle.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.GetNextSequenceNumber">
            <summary>
            Get next sequence number for chunk.
            </summary>
            <returns>The next sequence number.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.GetNextNonce(System.Int32)">
            <summary>
            Get next random nonce of requested length.
            </summary>
            <param name="length">The requested length.</param>
            <returns>An nonce of requested length.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel">
            <summary>
            A session-full, secure channel for communicating with OPC UA servers using the UA TCP transport profile.
            </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.DefaultSessionTimeout">
            <summary>
            The default session timeout.
            </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.DefaultPublishingInterval">
            <summary>
            The default subscription publishing interval.
            </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.DefaultKeepaliveCount">
            <summary>
            The default subscription keep-alive count.
            </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.DefaultLifetimeCount">
            <summary>
            The default subscription lifetime count.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,Workstation.ServiceModel.Ua.IUserIdentity,Workstation.ServiceModel.Ua.EndpointDescription,Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaTcpSessionChannelOptions,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel"/> class.
            </summary>
            <param name="localDescription">The <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="userIdentity">The user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <param name="remoteEndpoint">The <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/> of the remote application. Obtained from a prior call to UaTcpDiscoveryClient.GetEndpoints.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="options">The session channel options.</param>
            <param name="additionalTypes">Any additional types to be registered with encoder.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,Workstation.ServiceModel.Ua.IUserIdentity,System.String,System.String,Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaTcpSessionChannelOptions,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel"/> class.
            </summary>
            <param name="localDescription">The <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="userIdentity">The user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <param name="endpointUrl">The url of the endpoint of the remote application</param>
            <param name="securityPolicyUri">Optionally, filter by SecurityPolicyUri.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="options">The session channel options.</param>
            <param name="additionalTypes">Any additional types to be registered with encoder.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,System.Func{Workstation.ServiceModel.Ua.EndpointDescription,System.Threading.Tasks.Task{Workstation.ServiceModel.Ua.IUserIdentity}},Workstation.ServiceModel.Ua.EndpointDescription,Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaTcpSessionChannelOptions,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel"/> class.
            </summary>
            <param name="localDescription">The <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="userIdentityProvider">An asynchronous function that provides the user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <param name="remoteEndpoint">The <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/> of the remote application. Obtained from a prior call to UaTcpDiscoveryClient.GetEndpoints.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="options">The session channel options.</param>
            <param name="additionalTypes">Any additional types to be registered with encoder.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,System.Func{Workstation.ServiceModel.Ua.EndpointDescription,System.Threading.Tasks.Task{Workstation.ServiceModel.Ua.IUserIdentity}},System.String,System.String,Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaTcpSessionChannelOptions,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel"/> class.
            </summary>
            <param name="localDescription">The <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="userIdentityProvider">An asynchronous function that provides the user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <param name="endpointUrl">The url of the endpoint of the remote application</param>
            <param name="securityPolicyUri">Optionally, filter by SecurityPolicyUri.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="options">The session channel options.</param>
            <param name="additionalTypes">Any additional types to be registered with encoder.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.UserIdentityProvider">
            <summary>
            Gets the asynchronous function that provides the user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.UserIdentity">
            <summary>
            Gets the user identity.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.SessionId">
            <summary>
            Gets the session id provided by the server.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.RemoteNonce">
            <summary>
            Gets the remote nonce provided by the server.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.Completion">
            <summary>
            Gets a Task that represents the asynchronous operation and completion of the channel.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{Workstation.ServiceModel.Ua.PublishResponse},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{Workstation.ServiceModel.Ua.PublishResponse},System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{Workstation.ServiceModel.Ua.PublishResponse})">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{Workstation.ServiceModel.Ua.PublishResponse})">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.Fault(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.Subscribe(System.IObserver{Workstation.ServiceModel.Ua.PublishResponse})">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.OnOpeningAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.OnOpenAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.OnClosingAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.OnCloseAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.OnPublishResponse(Workstation.ServiceModel.Ua.PublishResponse)">
            <summary>
            Handle PublishResponse message.
            </summary>
            <param name="publishResponse">The publish response.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.PublishAsync(System.Threading.CancellationToken)">
            <summary>
            Sends publish requests to the server.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.StateMachineAsync(System.Threading.CancellationToken)">
            <summary>
            The state machine manages the state of the channel.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel">
            <summary>
            A channel for communicating with OPC UA servers using the UA TCP transport profile.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.#ctor(Workstation.ServiceModel.Ua.EndpointDescription,Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaTcpTransportChannelOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel"/> class.
            </summary>
            <param name="remoteEndpoint">The remote endpoint.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="options">The transport channel options.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.RemoteEndpoint">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.LocalReceiveBufferSize">
            <summary>
            Gets the size of the receive buffer.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.LocalSendBufferSize">
            <summary>
            Gets the size of the send buffer.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.LocalMaxMessageSize">
            <summary>
            Gets the maximum total size of a message.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.LocalMaxChunkCount">
            <summary>
            Gets the maximum number of message chunks.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.RemoteReceiveBufferSize">
            <summary>
            Gets the size of the remote receive buffer.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.RemoteSendBufferSize">
            <summary>
            Gets the size of the remote send buffer.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.RemoteMaxMessageSize">
            <summary>
            Gets the maximum size of a message that may be sent.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.RemoteMaxChunkCount">
            <summary>
            Gets the maximum number of message chunks that may be sent.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.Socket">
            <summary>
            Gets the inner TCP socket.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.SendAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes to the remote endpoint.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.ReceiveAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously receives a sequence of bytes from the remote endpoint.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.OnOpenAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.OnCloseAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.OnAbortAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.CommunicationState">
            <summary>Defines the states in which an <see cref="T:ConverterSystems.ServiceModel.Ua.ICommunicationObject" /> can exist. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Created">
            <summary>Indicates that the communication object has been instantiated and is configurable, but not yet open or ready for use.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Opening">
            <summary>Indicates that the communication object is being transitioned to the opened state. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Opened">
            <summary>Indicates that the communication object is now open and ready to be used. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Closing">
            <summary>Indicates that the communication object is transitioning to the closed state. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Closed">
            <summary>Indicates that the communication object has been closed and is no longer usable. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Faulted">
            <summary>Indicates that the communication object has encountered an error or fault from which it cannot recover and from which it is no longer usable. </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Condition">
            <summary>
            Represents a condition.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.DataTypeIdAttribute">
            <summary>
            Attribute for classes to indicate the data type id.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DataValueExtensions.GetValue(Workstation.ServiceModel.Ua.DataValue)">
            <summary>
            Gets the value of the DataValue.
            </summary>
            <param name="dataValue">The DataValue.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DataValueExtensions.GetValueOrDefault``1(Workstation.ServiceModel.Ua.DataValue)">
            <summary>
            Gets the value of the DataValue, or the default value for the type.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="dataValue">The DataValue.</param>
            <returns>The value, if an instance of the specified Type, otherwise the Type's default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DataValueExtensions.GetValueOrDefault``1(Workstation.ServiceModel.Ua.DataValue,``0)">
            <summary>
            Gets the value of the DataValue, or the specified default value.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="dataValue">A DataValue</param>
            <param name="defaultValue">A default value.</param>
            <returns>The value, if an instance of the specified Type, otherwise the specified default value.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.DirectoryStore">
            <summary>
            A certificate store.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DirectoryStore.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.DirectoryStore"/> class.
            </summary>
            <param name="path">The path to the local pki directory.</param>
            <param name="acceptAllRemoteCertificates">Set true to accept all remote certificates.</param>
            <param name="createLocalCertificateIfNotExist">Set true to create a local certificate and private key, if the files do not exist.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.DirectoryStore.AcceptAllRemoteCertificates">
            <summary>
            Gets a value indicating whether to accept all remote certificates.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.DirectoryStore.CreateLocalCertificateIfNotExist">
            <summary>
            Gets a value indicating whether to create a local certificate if it does not exist.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DirectoryStore.GetLocalCertificateAsync(Workstation.ServiceModel.Ua.ApplicationDescription,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DirectoryStore.ValidateRemoteCertificateAsync(Org.BouncyCastle.X509.X509Certificate,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DirectoryStore.IsSelfSigned(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Checks whether given <see cref="T:Org.BouncyCastle.X509.X509Certificate"/> is self-signed.
            </summary>
            <param name="cert">an <see cref="T:Org.BouncyCastle.X509.X509Certificate"/>.</param>
            <returns>True, if self signed.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.EventFieldAttribute">
            <summary>
            Specifies the EventField that will be created for this property.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.EventFieldAttribute.#ctor(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.EventFieldAttribute"/> class.
            </summary>
            <param name="typeDefinitionId">the TypeDefinitionId.</param>
            <param name="browsePath">the browse names, separated by '/'.</param>
            <param name="attributeId">the attribute.</param>
            <param name="indexRange">the range of array indexes.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.EventFieldAttribute.TypeDefinitionId">
            <summary>
            Gets the TypeDefinitionId.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.EventFieldAttribute.BrowsePath">
            <summary>
            Gets the BrowsePath.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.EventFieldAttribute.AttributeId">
            <summary>
            Gets the attribute.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.EventFieldAttribute.IndexRange">
            <summary>
            Gets the range of array indexes.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ICertificateStore">
            <summary>
            The certificate store interface.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICertificateStore.GetLocalCertificateAsync(Workstation.ServiceModel.Ua.ApplicationDescription,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Gets the local certificate and private key.
            </summary>
            <param name="applicationDescription">The application description.</param>
            <param name="logger">The logger.</param>
            <returns>The local certificate and private key.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICertificateStore.ValidateRemoteCertificateAsync(Org.BouncyCastle.X509.X509Certificate,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Validates the remote certificate.
            </summary>
            <param name="certificate">The remote certificate.</param>
            <param name="logger">The logger.</param>
            <returns>The validator result.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ICommunicationObject">
            <summary>Defines the contract for the basic state machine for all communication-oriented objects in the system.</summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ICommunicationObject.State">
            <summary>Gets the current state of the communication-oriented object.</summary>
            <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICommunicationObject.AbortAsync(System.Threading.CancellationToken)">
            <summary>Causes a communication object to transition immediately from its current state into the closed state.  </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies that the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICommunicationObject.CloseAsync(System.Threading.CancellationToken)">
            <summary>Causes a communication object to transition from its current state into the closed state.  </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies that the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICommunicationObject.OpenAsync(System.Threading.CancellationToken)">
            <summary>Causes a communication object to transition from the created state into the opened state.  </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies that the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.IRequestChannel">
            <summary>
            Provides a method to send an <see cref="T:Workstation.ServiceModel.Ua.IServiceRequest" /> to a RemoteEndpoint.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.IRequestChannel.RequestAsync(Workstation.ServiceModel.Ua.IServiceRequest,System.Threading.CancellationToken)">
            <summary>Sends an IServiceRequest and returns the correlated IServiceResponse.</summary>
            <returns>The <see cref="T:ConverterSystems.ServiceModel.Ua.IServiceResponse" /> received in response to the request. </returns>
            <param name="request">The <see cref="T:ConverterSystems.ServiceModel.Ua.IServiceRequest" /> to be transmitted.</param>
            <param name="token">Optional <see cref="T:System.Threading.CancellationToken" />.</param>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ISetDataErrorInfo">
            <summary>
            Sets the result of create, read, write, or publish service calls.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ISetDataErrorInfo.SetErrors(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the result of a create, read, write, or publish service call.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="errors">The error messages.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.LocalizedText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.LocalizedText"/> class.
            </summary>
            <param name="text">The text in the specified locale.</param>
            <param name="locale">The locale.</param>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.MappedEndpoint">
            <summary>
            A map between a requested endpoint url and the endpoint.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MethodServiceSet.CallAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.CallRequest,System.Threading.CancellationToken)">
            <summary>
            Calls (invokes) a list of Methods.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CallRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CallResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.MonitoredItemAttribute">
            <summary>
            Specifies the MonitoredItem that will be created for this property.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemAttribute.#ctor(System.String,System.UInt32,System.String,System.Int32,System.UInt32,System.Boolean,Workstation.ServiceModel.Ua.DataChangeTrigger,Workstation.ServiceModel.Ua.DeadbandType,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemAttribute"/> class.
            </summary>
            <param name="nodeId">the NodeId to monitor.</param>
            <param name="attributeId">the attribute to monitor.</param>
            <param name="indexRange">the range of array indexes to monitor.</param>
            <param name="samplingInterval">the sampling interval.</param>
            <param name="queueSize">the length of the queue used by the server to buffer values.</param>
            <param name="discardOldest">a value indicating whether to discard the oldest entries in the queue when it is full.</param>
            <param name="dataChangeTrigger">the properties that trigger a data change.</param>
            <param name="deadbandType">the type of deadband calculation.</param>
            <param name="deadbandValue">the deadband value.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.NodeId">
            <summary>
            Gets the NodeId to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.AttributeId">
            <summary>
            Gets the attribute to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.IndexRange">
            <summary>
            Gets the range of array indexes to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.SamplingInterval">
            <summary>
            Gets the sampling interval.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.QueueSize">
            <summary>
            Gets the length of the queue used by the server to buffer values.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.DiscardOldest">
            <summary>
            Gets a value indicating whether to discard the oldest entries in the queue when it is full.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.DataChangeTrigger">
            <summary>
            Gets the properties that trigger a data change.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.DeadbandType">
            <summary>
            Gets the type of deadband calculation.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.DeadbandValue">
            <summary>
            Gets the deadband value.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.MonitoredItemBase">
            <summary>
            Subscribes to data changes or events of an attribute of a node.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemBase.#ctor(System.String,Workstation.ServiceModel.Ua.ExpandedNodeId,System.UInt32,System.String,Workstation.ServiceModel.Ua.MonitoringMode,System.Int32,Workstation.ServiceModel.Ua.MonitoringFilter,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemBase"/> class.
            </summary>
            <param name="name">the key.</param>
            <param name="nodeId">the ExpandedNodeId to monitor.</param>
            <param name="attributeId">the attribute to monitor.</param>
            <param name="indexRange">the range of array indexes to monitor.</param>
            <param name="monitoringMode">the monitoring mode.</param>
            <param name="samplingInterval">the sampling interval.</param>
            <param name="filter">the properties that trigger a notification.</param>
            <param name="queueSize">the length of the queue used by the server to buffer values.</param>
            <param name="discardOldest">a value indicating whether to discard the oldest entries in the queue when it is full.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.Name">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.NodeId">
            <summary>
            Gets the ExpandedNodeId to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.AttributeId">
            <summary>
            Gets the attribute to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.IndexRange">
            <summary>
            Gets the range of array indexes to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.MonitoringMode">
            <summary>
            Gets the monitoring mode.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.SamplingInterval">
            <summary>
            Gets the sampling interval.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.Filter">
            <summary>
            Gets the filter used by the server to select values to return.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.QueueSize">
            <summary>
            Gets the length of the queue used by the server to buffer values.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.DiscardOldest">
            <summary>
            Gets a value indicating whether to discard the oldest entries in the queue when it is full.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.ClientId">
            <summary>
            Gets the identifier assigned by the client.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.ServerId">
            <summary>
            Gets or sets the identifier assigned by the server.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.DataValueMonitoredItem">
            <summary>
            Subscribes to data changes of an attribute of a node.
            Sets the published value in a property of type DataValue.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.DataValueMonitoredItem.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.DataValueMonitoredItem.Property">
            <summary>
            Gets the property of the target to store the published value.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ValueMonitoredItem">
            <summary>
            Subscribes to data changes of an attribute of a node.
            Unwraps the published value and sets it in a property.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ValueMonitoredItem.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ValueMonitoredItem.Property">
            <summary>
            Gets the property of the target to store the published value.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.DataValueQueueMonitoredItem">
            <summary>
            Subscribes to data changes of an attribute of a node.
            Enqueues the published value to an <see cref="T:Workstation.Collections.ObservableQueue`1"/>.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.DataValueQueueMonitoredItem.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.DataValueQueueMonitoredItem.Property">
            <summary>
            Gets the property of the target to store the published value.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.EventMonitoredItem">
            <summary>
            Subscribes to events of an attribute of a node.
            Sets the published event in a property of type BaseEvent or subtype.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.EventMonitoredItem.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.EventMonitoredItem.Property">
            <summary>
            Gets the property of the target to store the published value.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.EventQueueMonitoredItem`1">
            <summary>
            Subscribes to events of an attribute of a node.
            Enqueues the published event to an <see cref="T:Workstation.Collections.ObservableQueue`1"/>.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.EventQueueMonitoredItem`1.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.EventQueueMonitoredItem`1.Property">
            <summary>
            Gets the property of the target to store the published value.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection">
            <summary>
            A collection of <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemBase"/>.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection"/> class.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection.Item(System.String)">
            <summary>Gets the element with the specified name. </summary>
            <returns>The element with the specified name. If an element with the specified key is not found, an exception is thrown.</returns>
            <param name="name">The name of the element to get.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="name" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">An element with the specified name does not exist in the collection.</exception>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection.Item(System.UInt32)">
            <summary>Gets the element with the specified clientId. </summary>
            <returns>The element with the specified clientId. If an element with the specified key is not found, an exception is thrown.</returns>
            <param name="clientId">The clientId of the element to get.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="clientId" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">An element with the specified clientId does not exist in the collection.</exception>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection.TryGetValueByName(System.String,Workstation.ServiceModel.Ua.MonitoredItemBase@)">
            <summary>Gets the value associated with the specified name.</summary>
            <returns>true if the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection" /> contains an element with the specified name; otherwise, false.</returns>
            <param name="name">The name of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection.TryGetValueByClientId(System.UInt32,Workstation.ServiceModel.Ua.MonitoredItemBase@)">
            <summary>Gets the value associated with the specified clientId.</summary>
            <returns>true if the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemBaseCollection" /> contains an element with the specified clientId; otherwise, false.</returns>
            <param name="clientId">The clientId of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.CreateMonitoredItemsAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.CreateMonitoredItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Creates and adds one or more MonitoredItems to a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CreateMonitoredItemsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CreateMonitoredItemsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.ModifyMonitoredItemsAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.ModifyMonitoredItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Modifies MonitoredItems of a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.ModifyMonitoredItemsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.ModifyMonitoredItemsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.SetMonitoringModeAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.SetMonitoringModeRequest,System.Threading.CancellationToken)">
            <summary>
            Sets the monitoring mode for one or more MonitoredItems of a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.SetMonitoringModeRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.SetMonitoringModeResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.SetTriggeringAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.SetTriggeringRequest,System.Threading.CancellationToken)">
            <summary>
            Creates and deletes triggering links for a triggering item.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.SetTriggeringRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.SetTriggeringResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.DeleteMonitoredItemsAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.DeleteMonitoredItemsRequest,System.Threading.CancellationToken)">
            <summary>
            Removes one or more MonitoredItems of a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.DeleteMonitoredItemsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.DeleteMonitoredItemsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeId.#ctor(System.UInt32,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.NodeId"/> class.
            </summary>
            <param name="identifier">the identifier for a node within a namespace</param>
            <param name="namespaceIndex">the index of the namespace in the NamespaceArray. An index of 0 corresponds to "http://opcfoundation.org/UA/".</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeId.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.NodeId"/> class.
            </summary>
            <param name="identifier">the identifier for a node within a namespace</param>
            <param name="namespaceIndex">the index of the namespace in the NamespaceArray. An index of 0 corresponds to "http://opcfoundation.org/UA/".</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeId.#ctor(System.Guid,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.NodeId"/> class.
            </summary>
            <param name="identifier">the identifier for a node within a namespace</param>
            <param name="namespaceIndex">the index of the namespace in the NamespaceArray. An index of 0 corresponds to "http://opcfoundation.org/UA/".</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeId.#ctor(System.Byte[],System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.NodeId"/> class.
            </summary>
            <param name="identifier">the identifier for a node within a namespace</param>
            <param name="namespaceIndex">the index of the namespace in the NamespaceArray. An index of 0 corresponds to "http://opcfoundation.org/UA/".</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeManagementServiceSet.AddNodesAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.AddNodesRequest,System.Threading.CancellationToken)">
            <summary>
            Adds one or more Nodes into the AddressSpace hierarchy.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.AddNodesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.AddNodesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeManagementServiceSet.AddReferencesAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.AddReferencesRequest,System.Threading.CancellationToken)">
            <summary>
            Adds one or more References to one or more Nodes.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.AddReferencesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.AddReferencesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeManagementServiceSet.DeleteNodesAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.DeleteNodesRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes one or more Nodes from the AddressSpace.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.DeleteNodesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.DeleteNodesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeManagementServiceSet.DeleteReferencesAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.DeleteReferencesRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes one or more References of a Node.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.DeleteReferencesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.DeleteReferencesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.QualifiedName.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.QualifiedName"/> class.
            </summary>
            <param name="name">the text portion of the QualifiedName. </param>
            <param name="namespaceIndex">index that identifies the namespace that qualifies the name.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.QueryServiceSet.QueryFirstAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.QueryFirstRequest,System.Threading.CancellationToken)">
            <summary>
            Issues a Query request to a View.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.QueryFirstRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.QueryFirstResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.QueryServiceSet.QueryNextAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.QueryNextRequest,System.Threading.CancellationToken)">
            <summary>
            Requests the next set of Query responses, when the information is too large to be sent in a single response.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.QueryNextRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.QueryNextResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.ToVariantArray(System.Object[])">
            <summary>
            Converts an array of objects to an array of <see cref="T:ConverterSystems.ServiceModel.Ua.Variant" />.
            </summary>
            <param name="array">The object array.</param>
            <returns>The <see cref="T:ConverterSystems.ServiceModel.Ua.Variant" /> array.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.ToObjectArray(Workstation.ServiceModel.Ua.Variant[])">
            <summary>
            Converts an array of <see cref="T:ConverterSystems.ServiceModel.Ua.Variant" /> to an array of objects.
            </summary>
            <param name="array">The <see cref="T:ConverterSystems.ServiceModel.Ua.Variant" /> array.</param>
            <returns>The object array.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.ConditionRefreshAsync(Workstation.ServiceModel.Ua.IRequestChannel,System.UInt32)">
            <summary>
            Requests a Refresh of all Conditions.
            </summary>
            <param name="channel">The channel.</param>
            <param name="subscriptionId">The subscriptionId.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.AcknowledgeAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.AcknowledgeableCondition,Workstation.ServiceModel.Ua.LocalizedText)">
            <summary>
            Acknowledges a condition.
            </summary>
            <param name="channel">The channel.</param>
            <param name="condition">an AcknowledgeableCondition.</param>
            <param name="comment">a comment.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.ConfirmAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.AcknowledgeableCondition,Workstation.ServiceModel.Ua.LocalizedText)">
            <summary>
            Confirms a condition.
            </summary>
            <param name="channel">The channel.</param>
            <param name="condition">an AcknowledgeableCondition.</param>
            <param name="comment">a comment.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ServiceResult">
            <summary>
            A class that combines the status code and diagnostic info structures.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.#ctor(Workstation.ServiceModel.Ua.StatusCode,System.String,System.String,Workstation.ServiceModel.Ua.LocalizedText,System.String,Workstation.ServiceModel.Ua.ServiceResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.ServiceResult"/> class.
            </summary>
            <param name="code">A code.</param>
            <param name="symbolicId">A symbolicId.</param>
            <param name="namespaceUri">A namespaceUri.</param>
            <param name="localizedText">A localizedText.</param>
            <param name="additionalInfo">AdditionalInfo.</param>
            <param name="innerResult">An innerResult</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.#ctor(Workstation.ServiceModel.Ua.StatusCode,Workstation.ServiceModel.Ua.DiagnosticInfo,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.ServiceResult"/> class.
            </summary>
            <param name="code">A code.</param>
            <param name="diagnosticInfo">A diagnostic info.</param>
            <param name="stringTable">A string table.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.#ctor(Workstation.ServiceModel.Ua.StatusCode,System.Int32,Workstation.ServiceModel.Ua.DiagnosticInfo[],System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.ServiceResult"/> class.
            </summary>
            <param name="code">A code.</param>
            <param name="index">An index.</param>
            <param name="diagnosticInfos">A diagnostic info array.</param>
            <param name="stringTable">A string table.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.StatusCode">
            <summary>
            Gets the status code associated with the result.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.NamespaceUri">
            <summary>
            Gets the namespace that qualifies symbolic identifier.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.SymbolicId">
            <summary>
            Gets the qualified name of the symbolic identifier associated with the status code.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.LocalizedText">
            <summary>
            Gets the localized description for the status code.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.AdditionalInfo">
            <summary>
            Gets additional diagnostic/debugging information associated with the operation.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.InnerResult">
            <summary>
            Gets nested error information.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.op_Implicit(System.UInt32)~Workstation.ServiceModel.Ua.ServiceResult">
            <summary>
            Converts a 32-bit code a ServiceResult object.
            </summary>
            <returns>A ServiceResult.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.op_Implicit(Workstation.ServiceModel.Ua.StatusCode)~Workstation.ServiceModel.Ua.ServiceResult">
            <summary>
            Converts a StatusCode a ServiceResult object.
            </summary>
            <returns>A ServiceResult.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.IsGood(Workstation.ServiceModel.Ua.ServiceResult)">
            <summary>
            Returns true if the status code is good.
            </summary>
            <returns>A bool.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.IsUncertain(Workstation.ServiceModel.Ua.ServiceResult)">
            <summary>
            Returns true if the status code is uncertain.
            </summary>
            <returns>A bool.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.IsBad(Workstation.ServiceModel.Ua.ServiceResult)">
            <summary>
            Returns true if the status code is bad.
            </summary>
            <returns>A bool.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.ToString">
            <summary>
            Converts the value to a human readable string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.LookupString(System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Looks up a string in a string table.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResultException.StatusCode">
            <summary>
            Gets the StatusCode of the ServiceResult.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SessionServiceSet.CreateSessionAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.CreateSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a Session.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CreateSessionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CreateSessionResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SessionServiceSet.ActivateSessionAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.ActivateSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Activates a session.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.ActivateSessionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.ActivateSessionResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SessionServiceSet.CloseSessionAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.CloseSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Closes a session.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CloseSessionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CloseSessionResponse"/>.</returns>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.Good">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadUnexpectedError">
            <summary>An unexpected error occurred.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInternalError">
            <summary>An internal error occurred as a result of a programming or configuration error.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadOutOfMemory">
            <summary>Not enough memory to complete the operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadResourceUnavailable">
            <summary>An operating system resource is not available.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCommunicationError">
            <summary>A low level communication error occurred.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEncodingError">
            <summary>Encoding halted because of invalid data in the objects being serialized.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDecodingError">
            <summary>Decoding halted because of invalid data in the stream.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEncodingLimitsExceeded">
            <summary>The message encoding/decoding limits imposed by the stack have been exceeded.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestTooLarge">
            <summary>The request message size exceeds limits set by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadResponseTooLarge">
            <summary>The response message size exceeds limits set by the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadUnknownResponse">
            <summary>An unrecognized response was received from the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTimeout">
            <summary>The operation timed out.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServiceUnsupported">
            <summary>The server does not support the requested service.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadShutdown">
            <summary>The operation was cancelled because the application is shutting down.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerNotConnected">
            <summary>The operation could not complete because the client is not connected to the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerHalted">
            <summary>The server has stopped and cannot process any requests.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNothingToDo">
            <summary>There was nothing to do because the client passed a list of operations with no elements.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyOperations">
            <summary>The request could not be processed because it specified too many operations.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyMonitoredItems">
            <summary>The request could not be processed because there are too many monitored items in the subscription.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataTypeIdUnknown">
            <summary>The extension object cannot be (de)serialized because the data type id is not recognized.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateInvalid">
            <summary>The certificate provided as a parameter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecurityChecksFailed">
            <summary>An error occurred verifying security.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificatePolicyCheckFailed">
            <summary>The certificate does not meet the requirements of the security policy.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateTimeInvalid">
            <summary>The certificate has expired or is not yet valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateIssuerTimeInvalid">
            <summary>An issuer certificate has expired or is not yet valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateHostNameInvalid">
            <summary>The HostName used to connect to a server does not match a HostName in the certificate.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateUriInvalid">
            <summary>The URI specified in the ApplicationDescription does not match the URI in the certificate.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateUseNotAllowed">
            <summary>The certificate may not be used for the requested operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateIssuerUseNotAllowed">
            <summary>The issuer certificate may not be used for the requested operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateUntrusted">
            <summary>The certificate is not trusted.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateRevocationUnknown">
            <summary>It was not possible to determine if the certificate has been revoked.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateIssuerRevocationUnknown">
            <summary>It was not possible to determine if the issuer certificate has been revoked.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateRevoked">
            <summary>The certificate has been revoked.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateIssuerRevoked">
            <summary>The issuer certificate has been revoked.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateChainIncomplete">
            <summary>The certificate chain is incomplete.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadUserAccessDenied">
            <summary>User does not have permission to perform the requested operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIdentityTokenInvalid">
            <summary>The user identity token is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIdentityTokenRejected">
            <summary>The user identity token is valid but the server has rejected it.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecureChannelIdInvalid">
            <summary>The specified secure channel is no longer valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidTimestamp">
            <summary>The timestamp is outside the range allowed by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNonceInvalid">
            <summary>The nonce does appear to be not a random value or it is not the correct length.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSessionIdInvalid">
            <summary>The session id is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSessionClosed">
            <summary>The session was closed by the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSessionNotActivated">
            <summary>The session cannot be used because ActivateSession has not been called.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSubscriptionIdInvalid">
            <summary>The subscription id is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestHeaderInvalid">
            <summary>The header for the request is missing or invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTimestampsToReturnInvalid">
            <summary>The timestamps to return parameter is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestCancelledByClient">
            <summary>The request was cancelled by the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyArguments">
            <summary>Too many arguments were provided.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadLicenseExpired">
            <summary>The server requires a license to operate in general or to perform a service or operation, but existing license is expired.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadLicenseLimitsExceeded">
            <summary>The server has limits on number of allowed operations / objects, based on installed licenses, and these limits where exceeded.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadLicenseNotAvailable">
            <summary>The server does not have a license which is required to operate in general or to perform a service or operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodSubscriptionTransferred">
            <summary>The subscription was transferred to another session.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodCompletesAsynchronously">
            <summary>The processing will complete asynchronously.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodOverload">
            <summary>Sampling has slowed down due to resource limitations.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodClamped">
            <summary>The value written was accepted but was clamped.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoCommunication">
            <summary>Communication with the data source is defined, but not established, and there is no last known value available.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadWaitingForInitialData">
            <summary>Waiting for the server to obtain values from the underlying data source.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeIdInvalid">
            <summary>The syntax of the node id is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeIdUnknown">
            <summary>The node id refers to a node that does not exist in the server address space.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAttributeIdInvalid">
            <summary>The attribute is not supported for the specified Node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIndexRangeInvalid">
            <summary>The syntax of the index range parameter is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIndexRangeNoData">
            <summary>No data exists within the range of indexes specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataEncodingInvalid">
            <summary>The data encoding is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataEncodingUnsupported">
            <summary>The server does not support the requested data encoding for the node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotReadable">
            <summary>The access level does not allow reading or subscribing to the Node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotWritable">
            <summary>The access level does not allow writing to the Node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadOutOfRange">
            <summary>The value was out of range.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotSupported">
            <summary>The requested operation is not supported.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotFound">
            <summary>A requested item was not found or a search operation ended without success.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadObjectDeleted">
            <summary>The object cannot be used because it has been deleted.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotImplemented">
            <summary>Requested operation is not implemented.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMonitoringModeInvalid">
            <summary>The monitoring mode is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMonitoredItemIdInvalid">
            <summary>The monitoring item id does not refer to a valid monitored item.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMonitoredItemFilterInvalid">
            <summary>The monitored item filter parameter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMonitoredItemFilterUnsupported">
            <summary>The server does not support the requested monitored item filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterNotAllowed">
            <summary>A monitoring filter cannot be used in combination with the attribute specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadStructureMissing">
            <summary>A mandatory structured parameter was missing or null.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEventFilterInvalid">
            <summary>The event filter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadContentFilterInvalid">
            <summary>The content filter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterOperatorInvalid">
            <summary>An unrecognized operator was provided in a filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterOperatorUnsupported">
            <summary>A valid operator was provided, but the server does not provide support for this filter operator.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterOperandCountMismatch">
            <summary>The number of operands provided for the filter operator was less then expected for the operand provided.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterOperandInvalid">
            <summary>The operand used in a content filter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterElementInvalid">
            <summary>The referenced element is not a valid element in the content filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterLiteralInvalid">
            <summary>The referenced literal is not a valid value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadContinuationPointInvalid">
            <summary>The continuation point provide is longer valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoContinuationPoints">
            <summary>The operation could not be processed because all continuation points have been allocated.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadReferenceTypeIdInvalid">
            <summary>The reference type id does not refer to a valid reference type node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBrowseDirectionInvalid">
            <summary>The browse direction is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeNotInView">
            <summary>The node is not part of the view.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNumericOverflow">
            <summary>The number was not accepted because of a numeric overflow.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerUriInvalid">
            <summary>The ServerUri is not a valid URI.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerNameMissing">
            <summary>No ServerName was specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDiscoveryUrlMissing">
            <summary>No DiscoveryUrl was specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSempahoreFileMissing">
            <summary>The semaphore file specified by the client is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestTypeInvalid">
            <summary>The security token request type is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecurityModeRejected">
            <summary>The security mode does not meet the requirements set by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecurityPolicyRejected">
            <summary>The security policy does not meet the requirements set by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManySessions">
            <summary>The server has reached its maximum number of sessions.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadUserSignatureInvalid">
            <summary>The user token signature is missing or invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadApplicationSignatureInvalid">
            <summary>The signature generated with the client certificate is missing or invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoValidCertificates">
            <summary>The client did not provide at least one software certificate that is valid and meets the profile requirements for the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIdentityChangeNotSupported">
            <summary>The server does not support changing the user identity assigned to the session.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestCancelledByRequest">
            <summary>The request was cancelled by the client with the Cancel service.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadParentNodeIdInvalid">
            <summary>The parent node id does not to refer to a valid node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadReferenceNotAllowed">
            <summary>The reference could not be created because it violates constraints imposed by the data model.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeIdRejected">
            <summary>The requested node id was reject because it was either invalid or server does not allow node ids to be specified by the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeIdExists">
            <summary>The requested node id is already used by another node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeClassInvalid">
            <summary>The node class is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBrowseNameInvalid">
            <summary>The browse name is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBrowseNameDuplicated">
            <summary>The browse name is not unique among nodes that share the same relationship with the parent.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeAttributesInvalid">
            <summary>The node attributes are not valid for the node class.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTypeDefinitionInvalid">
            <summary>The type definition node id does not reference an appropriate type node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSourceNodeIdInvalid">
            <summary>The source node id does not reference a valid node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTargetNodeIdInvalid">
            <summary>The target node id does not reference a valid node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDuplicateReferenceNotAllowed">
            <summary>The reference type between the nodes is already defined.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidSelfReference">
            <summary>The server does not allow this type of self reference on this node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadReferenceLocalOnly">
            <summary>The reference type is not valid for a reference to a remote server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoDeleteRights">
            <summary>The server will not allow the node to be deleted.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainReferenceNotDeleted">
            <summary>The server was not able to delete all target references.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerIndexInvalid">
            <summary>The server index is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadViewIdUnknown">
            <summary>The view id does not refer to a valid view node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadViewTimestampInvalid">
            <summary>The view timestamp is not available or not supported.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadViewParameterMismatch">
            <summary>The view parameters are not consistent with each other.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadViewVersionInvalid">
            <summary>The view version is not available or not supported.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainNotAllNodesAvailable">
            <summary>The list of references may not be complete because the underlying system is not available.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodResultsMayBeIncomplete">
            <summary>The server should have followed a reference to a node in a remote server but did not. The result set may be incomplete.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotTypeDefinition">
            <summary>The provided Nodeid was not a type definition nodeid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainReferenceOutOfServer">
            <summary>One of the references to follow in the relative path references to a node in the address space in another server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyMatches">
            <summary>The requested operation has too many matches to return.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadQueryTooComplex">
            <summary>The requested operation requires too many resources in the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoMatch">
            <summary>The requested operation has no match to return.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMaxAgeInvalid">
            <summary>The max age parameter is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecurityModeInsufficient">
            <summary>The operation is not permitted over the current secure channel.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadHistoryOperationInvalid">
            <summary>The history details parameter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadHistoryOperationUnsupported">
            <summary>The server does not support the requested operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidTimestampArgument">
            <summary>The defined timestamp to return was invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadWriteNotSupported">
            <summary>The server does not support writing the combination of value, status and timestamps provided.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTypeMismatch">
            <summary>The value supplied for the attribute is not of the same type as the attribute's value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMethodInvalid">
            <summary>The method id does not refer to a method for the specified object.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadArgumentsMissing">
            <summary>The client did not specify all of the input arguments for the method.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotExecutable">
            <summary>The executable attribute does not allow the execution of the method.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManySubscriptions">
            <summary>The server has reached its maximum number of subscriptions.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyPublishRequests">
            <summary>The server has reached the maximum number of queued publish requests.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoSubscription">
            <summary>There is no subscription available for this session.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSequenceNumberUnknown">
            <summary>The sequence number is unknown to the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMessageNotAvailable">
            <summary>The requested notification message is no longer available.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInsufficientClientProfile">
            <summary>The client of the current session does not support one or more Profiles that are necessary for the subscription.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadStateNotActive">
            <summary>The sub-state machine is not currently active.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAlreadyExists">
            <summary>An equivalent rule already exists.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpServerTooBusy">
            <summary>The server cannot process the request because it is too busy.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpMessageTypeInvalid">
            <summary>The type of the message specified in the header invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpSecureChannelUnknown">
            <summary>The SecureChannelId and/or TokenId are not currently in use.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpMessageTooLarge">
            <summary>The size of the message specified in the header is too large.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpNotEnoughResources">
            <summary>There are not enough resources to process the request.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpInternalError">
            <summary>An internal error occurred.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpEndpointUrlInvalid">
            <summary>The server does not recognize the QueryString specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestInterrupted">
            <summary>The request could not be sent because of a network interruption.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestTimeout">
            <summary>Timeout occurred while processing the request.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecureChannelClosed">
            <summary>The secure channel has been closed.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecureChannelTokenUnknown">
            <summary>The token has expired or is not recognized.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSequenceNumberInvalid">
            <summary>The sequence number is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadProtocolVersionUnsupported">
            <summary>The applications do not have compatible protocol versions.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConfigurationError">
            <summary>There is a problem with the configuration that affects the usefulness of the value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotConnected">
            <summary>The variable should receive its value from another variable, but has never been configured to do so.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDeviceFailure">
            <summary>There has been a failure in the device/data source that generates the value that has affected the value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSensorFailure">
            <summary>There has been a failure in the sensor from which the value is derived by the device/data source.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadOutOfService">
            <summary>The source of the data is not operational.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDeadbandFilterInvalid">
            <summary>The deadband filter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainNoCommunicationLastUsableValue">
            <summary>Communication to the data source has failed. The variable value is the last value that had a good quality.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainLastUsableValue">
            <summary>Whatever was updating this value has stopped doing so.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainSubstituteValue">
            <summary>The value is an operational value that was manually overwritten.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainInitialValue">
            <summary>The value is an initial value for a variable that normally receives its value from another variable.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainSensorNotAccurate">
            <summary>The value is at one of the sensor limits.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainEngineeringUnitsExceeded">
            <summary>The value is outside of the range of values defined for this parameter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainSubNormal">
            <summary>The value is derived from multiple sources and has less than the required number of Good sources.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodLocalOverride">
            <summary>The value has been overridden.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRefreshInProgress">
            <summary>This Condition refresh failed, a Condition refresh operation is already in progress.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionAlreadyDisabled">
            <summary>This condition has already been disabled.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionAlreadyEnabled">
            <summary>This condition has already been enabled.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionDisabled">
            <summary>Property not available, this condition is disabled.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEventIdUnknown">
            <summary>The specified event id is not recognized.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEventNotAcknowledgeable">
            <summary>The event cannot be acknowledged.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDialogNotActive">
            <summary>The dialog condition is not active.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDialogResponseInvalid">
            <summary>The response is not valid for the dialog.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionBranchAlreadyAcked">
            <summary>The condition branch has already been acknowledged.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionBranchAlreadyConfirmed">
            <summary>The condition branch has already been confirmed.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionAlreadyShelved">
            <summary>The condition has already been shelved.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionNotShelved">
            <summary>The condition is not currently shelved.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadShelvingTimeOutOfRange">
            <summary>The shelving time not within an acceptable range.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoData">
            <summary>No data exists for the requested time range or event filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBoundNotFound">
            <summary>No data found to provide upper or lower bound value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBoundNotSupported">
            <summary>The server cannot retrieve a bound for the variable.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataLost">
            <summary>Data is missing due to collection started/stopped/lost.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataUnavailable">
            <summary>Expected data is unavailable for the requested time range due to an un-mounted volume, an off-line archive or tape, or similar reason for temporary unavailability.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEntryExists">
            <summary>The data or event was not successfully inserted because a matching entry exists.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoEntryExists">
            <summary>The data or event was not successfully updated because no matching entry exists.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTimestampNotSupported">
            <summary>The client requested history using a timestamp format the server does not support (i.e requested ServerTimestamp when server only supports SourceTimestamp).</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodEntryInserted">
            <summary>The data or event was successfully inserted into the historical database.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodEntryReplaced">
            <summary>The data or event field was successfully replaced in the historical database.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainDataSubNormal">
            <summary>The value is derived from multiple values and has less than the required number of Good values.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodNoData">
            <summary>No data exists for the requested time range or event filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodMoreData">
            <summary>The data or event field was successfully replaced in the historical database.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAggregateListMismatch">
            <summary>The requested number of Aggregates does not match the requested number of NodeIds.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAggregateNotSupported">
            <summary>The requested Aggregate is not support by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAggregateInvalidInputs">
            <summary>The aggregate value could not be derived due to invalid data inputs.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAggregateConfigurationRejected">
            <summary>The aggregate configuration is not valid for specified node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodDataIgnored">
            <summary>The request specifies fields which are not valid for the EventType or cannot be saved by the historian.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestNotAllowed">
            <summary>The request was rejected by the server because it did not meet the criteria set by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestNotComplete">
            <summary>The request has not been processed by the server yet.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodEdited">
            <summary>The value does not come from the real source and has been edited by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodPostActionFailed">
            <summary>There was an error in execution of these post-actions.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainDominantValueChanged">
            <summary>The related EngineeringUnit has been changed but the Variable Value is still provided based on the previous unit.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodDependentValueChanged">
            <summary>A dependent value has been changed but the change has not been applied to the device.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDominantValueChanged">
            <summary>The related EngineeringUnit has been changed but this change has not been applied to the device. The Variable Value is still dependent on the previous unit but its status is currently Bad.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainDependentValueChanged">
            <summary>A dependent value has been changed but the change has not been applied to the device. The quality of the dominant variable is uncertain.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDependentValueChanged">
            <summary>A dependent value has been changed but the change has not been applied to the device. The quality of the dominant variable is Bad.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodCommunicationEvent">
            <summary>The communication layer has raised an event.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodShutdownEvent">
            <summary>The system is shutting down.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodCallAgain">
            <summary>The operation is not finished and needs to be called again.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodNonCriticalTimeout">
            <summary>A non-critical timeout occurred.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidArgument">
            <summary>One or more arguments are invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConnectionRejected">
            <summary>Could not establish a network connection to remote server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDisconnect">
            <summary>The server has disconnected from the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConnectionClosed">
            <summary>The network connection has been closed.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidState">
            <summary>The operation cannot be completed because the object is closed, uninitialized or in some other invalid state.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEndOfStream">
            <summary>Cannot move beyond end of the stream.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoDataAvailable">
            <summary>No data is currently available for reading from a non-blocking stream.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadWaitingForResponse">
            <summary>The asynchronous operation is waiting for a response.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadOperationAbandoned">
            <summary>The asynchronous operation was abandoned by the caller.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadExpectedStreamToBlock">
            <summary>The stream did not return all data requested (possibly because it is a non-blocking stream).</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadWouldBlock">
            <summary>Non blocking behaviour is required and the operation would block.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSyntaxError">
            <summary>A value had an invalid syntax.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMaxConnectionsReached">
            <summary>The operation could not be finished because all available connections are in use.</summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Structure">
            <summary>
            A base implementation of a Structure.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.SubscriptionAttribute">
            <summary>
            Specifies the Subscription that will be created for this viewmodel.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionAttribute.#ctor(System.String,System.Double,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.SubscriptionAttribute"/> class.
            </summary>
            <param name="endpointUrl">the endpoint url.</param>
            <param name="publishingInterval">the publishing interval.</param>
            <param name="keepAliveCount">the number of PublishingIntervals before the server should return an empty Publish response.</param>
            <param name="lifetimeCount">the number of PublishingIntervals before the server should delete the subscription.</param>
            <param name="publishingEnabled">whether publishing is enabled.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.EndpointUrl">
            <summary>
            Gets the endpoint url.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.PublishingInterval">
            <summary>
            Gets the publishing interval.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.KeepAliveCount">
            <summary>
            Gets the number of PublishingIntervals before the server should return an empty Publish response.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.LifetimeCount">
            <summary>
            Gets the number of PublishingIntervals before the server should delete the subscription.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.PublishingEnabled">
            <summary>
            Gets a value indicating whether publishing is enabled.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.SubscriptionBase">
            <summary>
            A base class that subscribes to receive data changes and events from an OPC UA server.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.SubscriptionBase"/> class.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.#ctor(Workstation.ServiceModel.Ua.UaApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.SubscriptionBase"/> class.
            </summary>
            <param name="application">The UaApplication.</param>
        </member>
        <member name="E:Workstation.ServiceModel.Ua.SubscriptionBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionBase.State">
            <summary>
            Gets the <see cref="T:Workstation.ServiceModel.Ua.CommunicationState"/>.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionBase.SubscriptionId">
            <summary>
            Gets the current subscription Id.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.ConditionRefreshAsync">
            <summary>
            Requests a Refresh of all Conditions.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.AcknowledgeAsync(Workstation.ServiceModel.Ua.AcknowledgeableCondition,Workstation.ServiceModel.Ua.LocalizedText)">
            <summary>
            Acknowledges a condition.
            </summary>
            <param name="condition">an AcknowledgeableCondition.</param>
            <param name="comment">a comment.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.ConfirmAsync(Workstation.ServiceModel.Ua.AcknowledgeableCondition,Workstation.ServiceModel.Ua.LocalizedText)">
            <summary>
            Confirms a condition.
            </summary>
            <param name="condition">an AcknowledgeableCondition.</param>
            <param name="comment">a comment.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionBase.InnerChannel">
            <summary>
            Gets the inner channel.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets the property value and notifies listeners that the property value has changed.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a storage field.</param>
            <param name="value">The new value.</param>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value changed, otherwise false.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that the property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" />.</param>
        </member>
        <member name="E:Workstation.ServiceModel.Ua.SubscriptionBase.ErrorsChanged">
            <summary>
            Occurs when the validation errors have changed for a property or entity.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionBase.HasErrors">
            <summary>
            Gets a value indicating whether the entity has validation errors.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            </summary>
            <param name="propertyName">The name of the property to retrieve validation errors for, or null or System.String.Empty to retrieve entity-level errors.</param>
            <returns>The validation errors for the property or entity.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.Workstation#ServiceModel#Ua#ISetDataErrorInfo#SetErrors(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the validation errors for a specified property or for the entire entity.
            </summary>
            <param name="propertyName">The name of the property, or null or System.String.Empty to set entity-level errors.</param>
            <param name="errors">The validation errors for the property or entity.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.OnPublishResponse(Workstation.ServiceModel.Ua.PublishResponse)">
            <summary>
            Handle PublishResponse message.
            </summary>
            <param name="publishResponse">The publish response.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles PropertyChanged event. If the property is associated with a MonitoredItem, writes the property value to the node of the server.
            </summary>
            <param name="sender">the sender.</param>
            <param name="e">the event.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.WhenChannelClosingAsync(Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel,System.Threading.CancellationToken)">
            <summary>
            Signals the channel state is Closing.
            </summary>
            <param name="channel">The session channel. </param>
            <param name="token">A cancellation token. </param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionBase.StateMachineAsync(System.Threading.CancellationToken)">
            <summary>
            The state machine manages the state of the subscription.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.CreateSubscriptionAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.CreateSubscriptionRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CreateSubscriptionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CreateSubscriptionResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.ModifySubscriptionAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.ModifySubscriptionRequest,System.Threading.CancellationToken)">
            <summary>
            Modifies a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.ModifySubscriptionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.ModifySubscriptionResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.SetPublishingModeAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.SetPublishingModeRequest,System.Threading.CancellationToken)">
            <summary>
            Enables sending of Notifications on one or more Subscriptions.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.SetPublishingModeRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.SetPublishingModeResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.PublishAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.PublishRequest,System.Threading.CancellationToken)">
            <summary>
            Requests the Server to return a NotificationMessage or a keep-alive Message.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.PublishRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.PublishResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.RepublishAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.RepublishRequest,System.Threading.CancellationToken)">
            <summary>
            Requests the Server to republish a NotificationMessage from its retransmission queue.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.RepublishRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.RepublishResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.TransferSubscriptionsAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.TransferSubscriptionsRequest,System.Threading.CancellationToken)">
            <summary>
            Transfers a Subscription and its MonitoredItems from one Session to another.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.TransferSubscriptionsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.TransferSubscriptionsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.DeleteSubscriptionsAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.DeleteSubscriptionsRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes one or more Subscriptions.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.DeleteSubscriptionsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.DeleteSubscriptionsResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaApplication">
            <summary>
            A <see cref="T:Workstation.ServiceModel.Ua.UaApplication"/>.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplication.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,System.Func{Workstation.ServiceModel.Ua.EndpointDescription,System.Threading.Tasks.Task{Workstation.ServiceModel.Ua.IUserIdentity}},System.Collections.Generic.IEnumerable{Workstation.ServiceModel.Ua.MappedEndpoint},Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaApplicationOptions,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.UaApplication"/> class.
            </summary>
            <param name="localDescription">The <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="identityProvider">An asynchronous function that provides the user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <param name="mappedEndpoints">The mapped endpoints.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="options">The application options.</param>
            <param name="additionalTypes">Any additional types to be registered with encoder.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.Current">
            <summary>
            Gets the current <see cref="T:Workstation.ServiceModel.Ua.UaApplication"/>.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.LocalDescription">
            <summary>
            Gets the <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.CertificateStore">
            <summary>
            Gets the local certificate store.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.UserIdentityProvider">
            <summary>
            Gets an asynchronous function that provides the identity of the user. Supports <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> and <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.MappedEndpoints">
            <summary>
            Gets the mapped endpoints.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.LoggerFactory">
            <summary>
            Gets the logger factory.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.Options">
            <summary>
            Gets the application options.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.AdditionalTypes">
            <summary>
            Gets any additional types to be registered with encoder.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaApplication.Completion">
            <summary>
            Gets a System.Threading.Tasks.Task that represents the completion of the UaApplication.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplication.Dispose">
            <summary>
            Closes the communication channels.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplication.Dispose(System.Boolean)">
            <summary>
            Closes the communication channels to the remote endpoint.
            </summary>
            <param name="disposing">If true, then dispose managed resources.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplication.SuspendAsync">
            <summary>
            Suspends the communication channels to the remote endpoints.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that suspends the communication channel.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplication.Run">
            <summary>
            Creates the communication channels to the remote endpoints.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplication.CheckSuspension(System.Threading.CancellationToken)">
            <summary>
            Checks if application state is suspended.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplication.GetChannelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets or creates an <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel"/>.
            </summary>
            <param name="endpointUrl">The endpoint url of the OPC UA server</param>
            <param name="token">A cancellation token.</param>
            <returns>A <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaApplicationBuilder">
            <summary>
            Use to build an <see cref="T:Workstation.ServiceModel.Ua.UaApplication"/>.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.SetApplicationUri(System.String)">
            <summary>
            Specify the ApplicationUri.
            </summary>
            <param name="uri">A uri in the form of 'http://{hostname}/{appname}' -or- 'urn:{hostname}:{appname}'.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.SetDirectoryStore(System.String,System.Boolean,System.Boolean)">
            <summary>
            Specify the directory-based Certificate store. Directory will be created if it does not exist.
            </summary>
            <param name="path">The path to the local pki directory.</param>
            <param name="acceptAllRemoteCertificates">Set true to accept all remote certificates.</param>
            <param name="createLocalCertificateIfNotExist">Set true to create a local certificate and private key, if the files do not exist.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.SetIdentity(Workstation.ServiceModel.Ua.IUserIdentity)">
            <summary>
            Specify the <see cref="T:Workstation.ServiceModel.Ua.IUserIdentity"/>.
            </summary>
            <param name="identity">The user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.SetIdentity(System.Func{Workstation.ServiceModel.Ua.EndpointDescription,System.Threading.Tasks.Task{Workstation.ServiceModel.Ua.IUserIdentity}})">
            <summary>
            Specify the <see cref="T:Workstation.ServiceModel.Ua.IUserIdentity"/>.
            </summary>
            <param name="identityProvider">An asynchronous function that provides the user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.SetLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.
            </summary>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.ConfigureLoggerFactory(System.Action{Microsoft.Extensions.Logging.ILoggerFactory})">
            <summary>
            Configure the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.
            </summary>
            <param name="configureDelegate">A delegate that configures the LogggerFactory.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.SetOptions(Workstation.ServiceModel.Ua.UaApplicationOptions)">
            <summary>
            Specify the <see cref="T:Workstation.ServiceModel.Ua.UaApplicationOptions"/>.
            </summary>
            <param name="options">The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationOptions"/>.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.ConfigureOptions(System.Action{Workstation.ServiceModel.Ua.UaApplicationOptions})">
            <summary>
            Configure the <see cref="T:Workstation.ServiceModel.Ua.UaApplicationOptions"/>.
            </summary>
            <param name="configureDelegate">A delegate that configures the options.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.AddMappedEndpoint(System.String,Workstation.ServiceModel.Ua.EndpointDescription)">
            <summary>
            Add a mapping between the requested url and corresponding <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/>.
            </summary>
            <param name="requestedUrl">The url requested.</param>
            <param name="endpoint">The endpoint description to use.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.AddMappedEndpoint(System.String,System.String,System.String)">
            <summary>
            Add a mapping between the requested url and corresponding <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/>.
            </summary>
            <param name="requestedUrl">The url requested.</param>
            <param name="endpointUrl">The endpoint url to use.</param>
            <param name="securityPolicyUri">Optionally, the securityPolicyUri to use.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.AddMappedEndpoints(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds mappings between requested urls and corresponding <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/>s.
            </summary>
            <remarks>
            Provide a appSettings.json file containing:
            {
              "MappedEndpoints": [
                {
                  "RequestedUrl": "opc.tcp://localhost:26543",
                  "Endpoint": {
                    "EndpointUrl": "opc.tcp://andrew-think:26543",
                    "SecurityPolicyUri": "http://opcfoundation.org/UA/SecurityPolicy#None"
                  }
                }
              ]
            }
            </remarks>
            <param name="configuration">The configuration.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.AddTypes(System.Type[])">
            <summary>
            Adds any additional types to be registered with encoder.
            </summary>
            <param name="types">Types to be registered with the encoder.</param>
            <returns>The <see cref="T:Workstation.ServiceModel.Ua.UaApplicationBuilder"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaApplicationBuilder.Build">
            <summary>
            Build the <see cref="T:Workstation.ServiceModel.Ua.UaApplication"/>
            </summary>
            <returns>The  <see cref="T:Workstation.ServiceModel.Ua.UaApplication"/></returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaApplicationOptions">
            <summary>
            The UaApplication options.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaTcpSessionChannelOptions">
            <summary>
            The UaTcpSessionChannel options.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionChannelOptions.SessionTimeout">
            <summary>
            Gets the requested number of milliseconds that a session may be unused before being closed by the server.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaTcpSecureChannelOptions">
            <summary>
            The UaTcpSecureChannel options.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSecureChannelOptions.TimeoutHint">
            <summary>
            Gets or sets the default number of milliseconds that may elapse before an operation is cancelled by the service.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSecureChannelOptions.DiagnosticsHint">
            <summary>
            Gets or sets the default diagnostics flags to be requested by the service.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaTcpTransportChannelOptions">
            <summary>
            The UaTcpTransportChannel options.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpTransportChannelOptions.LocalReceiveBufferSize">
            <summary>
            Gets or sets the size of the receive buffer.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpTransportChannelOptions.LocalSendBufferSize">
            <summary>
            Gets or sets the size of the send buffer.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpTransportChannelOptions.LocalMaxMessageSize">
            <summary>
            Gets or sets the maximum total size of a message.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpTransportChannelOptions.LocalMaxChunkCount">
            <summary>
            Gets or sets the maximum number of message chunks.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaTcpDiscoveryService">
            <summary>
            A service for discovery of remote OPC UA servers and their endpoints.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpDiscoveryService.RemoteEndpoint">
            <summary>
            Gets the <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/> of the remote application.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpDiscoveryService.State">
            <summary>
            Gets a value that indicates the current state of the communication object.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryService.FindServersAsync(Workstation.ServiceModel.Ua.FindServersRequest,Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaApplicationOptions)">
            <summary>
            This Service returns the Servers known to a Server or Discovery Server.
            </summary>
            <param name="request">a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryService.GetEndpointsAsync(Workstation.ServiceModel.Ua.GetEndpointsRequest,Microsoft.Extensions.Logging.ILoggerFactory,Workstation.ServiceModel.Ua.UaApplicationOptions)">
            <summary>
            This Service returns the Endpoints supported by a Server and all of the configuration information required to establish a SecureChannel and a Session.
            </summary>
            <param name="request">a request.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="options">The secure channel options.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryService.AbortAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition immediately from its current state into the closing state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryService.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from its current state into the closed state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryService.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from the created state into the opened state.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.VariantExtensions.GetValue(Workstation.ServiceModel.Ua.Variant)">
            <summary>
            Gets the value of the Variant.
            </summary>
            <param name="variant">The Variant.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.VariantExtensions.GetValueOrDefault``1(Workstation.ServiceModel.Ua.Variant)">
            <summary>
            Gets the value of the Variant, or the default value for the type.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="variant">The Variant.</param>
            <returns>The value, if an instance of the specified Type, otherwise the Type's default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.VariantExtensions.GetValueOrDefault``1(Workstation.ServiceModel.Ua.Variant,``0)">
            <summary>
            Gets the value of the Variant, or the specified default value.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="variant">A Variant</param>
            <param name="defaultValue">A default value.</param>
            <returns>The value, if an instance of the specified Type, otherwise the specified default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.BrowseAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.BrowseRequest,System.Threading.CancellationToken)">
            <summary>
            Discovers the References of a specified Node.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.BrowseRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.BrowseResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.BrowseNextAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.BrowseNextRequest,System.Threading.CancellationToken)">
            <summary>
            Requests the next set of Browse responses, when the information is too large to be sent in a single response.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.BrowseNextRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.BrowseNextResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.TranslateBrowsePathsToNodeIdsAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.TranslateBrowsePathsToNodeIdsRequest,System.Threading.CancellationToken)">
            <summary>
            Translates one or more browse paths to NodeIds.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.TranslateBrowsePathsToNodeIdsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.TranslateBrowsePathsToNodeIdsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.RegisterNodesAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.RegisterNodesRequest,System.Threading.CancellationToken)">
            <summary>
            Registers the Nodes that will be accessed repeatedly (e.g. Write, Call).
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.RegisterNodesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.RegisterNodesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.UnregisterNodesAsync(Workstation.ServiceModel.Ua.IRequestChannel,Workstation.ServiceModel.Ua.UnregisterNodesRequest,System.Threading.CancellationToken)">
            <summary>
            Unregisters NodeIds that have been obtained via the RegisterNodes service.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.UnregisterNodesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.UnregisterNodesResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.XmlEncodingIdAttribute">
            <summary>
            Attribute for classes of type IEncodable to indicate the xml encoding id.
            </summary>
        </member>
    </members>
</doc>
